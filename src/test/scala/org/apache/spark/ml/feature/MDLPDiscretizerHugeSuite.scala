package org.apache.spark.ml.feature

import org.apache.spark.ml.feature.TestHelper._
import org.apache.spark.sql.{DataFrame, SQLContext}
import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import org.scalatest.{BeforeAndAfterAll, FunSuite}


/**
  * Test MDLP discretization on a larger dataset.
  *
  * @author Barry Becker
  */
@RunWith(classOf[JUnitRunner])
class MDLPDiscretizerHugeSuite extends FunSuite with BeforeAndAfterAll {

  var sqlContext: SQLContext = null

  override def beforeAll(): Unit = {
    sqlContext = new SQLContext(SPARK_CTX)
  }


  test("Run MDLPD on all columns in serverX data (label = target2, maxBins = 50, maxByPart = 100000)") {
    val dataDf = readServerXData(sqlContext)
    val model = getDiscretizerModel(dataDf,
      Array(/*"CPU1_TJ", */"CPU2_TJ", "total_cfm", "rpm1"),
      "CPU1_TJ", maxBins = 50, maxByPart = 100000, stoppingCriterion = 0, minBinPercentage = 1)

    assertResult(
      """-Infinity, 337.55365, 363.06793, Infinity;
        |-Infinity, 329.35974, 330.47424, 331.16617, 331.54724, 332.8419, 333.82208, 334.7564, 335.65106, 336.6503, 337.26328, 337.8406, 339.16763, 339.81476, 341.1809, 341.81186, 343.64825, 355.91144, 357.8602, 361.57806, Infinity;
        |-Infinity, 0.0041902177, 0.0066683707, 0.00841628, 0.009734755, 0.011627266, 0.012141651, 0.012740928, 0.013055362, 0.013293093, 0.014488807, 0.014869433, 0.015116488, 0.015383363, 0.015662778, 0.015978532, 0.016246023, 0.016492717, 0.01686273, 0.017246526, 0.017485093, 0.017720722, 0.017845878, 0.018008012, 0.018357705, 0.018629191, 0.018964633, 0.019226547, 0.019445801, 0.01960973, 0.019857172, 0.020095222, 0.020373512, 0.020728927, 0.020977266, 0.02137091, 0.021543117, 0.02188059, 0.022238541, 0.02265025, 0.023091711, 0.023352059, 0.023588676, 0.023957964, 0.024230447, 0.024448851, 0.024822969, 0.025079254, 0.026178652, 0.027195029, Infinity;
        |-Infinity, 1500.0, 4500.0, 7500.0, Infinity""".stripMargin.replaceAll(System.lineSeparator(), "")) {
      model.splits.map(a => a.mkString(", ")).mkString(";")
    }
  }

  test("Run MDLPD on all columns in serverX data (label = target2, maxBins = 50, maxByPart = 10000)") {
    val dataDf = readServerXData(sqlContext)
    val model = getDiscretizerModel(dataDf,
      Array("CPU1_TJ", "CPU2_TJ", "total_cfm", "rpm1"),
      "target4", maxBins = 50, maxByPart = 10000, stoppingCriterion = 0, minBinPercentage = 1)

    assertResult(
      """-Infinity, 337.55365, 363.06793, Infinity;
        |-Infinity, 329.35974, 330.47424, 331.16617, 331.54724, 332.8419, 333.82208, 334.7564, 335.65106, 336.6503, 337.26328, 337.8406, 339.16763, 339.81476, 341.1809, 341.81186, 343.64825, 355.91144, 357.8602, 361.57806, Infinity;
        |-Infinity, 0.0041902177, 0.0066683707, 0.00841628, 0.009734755, 0.011627266, 0.012141651, 0.012740928, 0.013055362, 0.013293093, 0.014488807, 0.014869433, 0.015116488, 0.015383363, 0.015662778, 0.015978532, 0.016246023, 0.016492717, 0.01686273, 0.017246526, 0.017485093, 0.017720722, 0.017845878, 0.018008012, 0.018357705, 0.018629191, 0.018964633, 0.019226547, 0.019445801, 0.01960973, 0.019857172, 0.020095222, 0.020373512, 0.020728927, 0.020977266, 0.02137091, 0.021543117, 0.02188059, 0.022238541, 0.02265025, 0.023091711, 0.023352059, 0.023588676, 0.023957964, 0.024230447, 0.024448851, 0.024822969, 0.025079254, 0.026178652, 0.027195029, Infinity;
        |-Infinity, 1500.0, 4500.0, 7500.0, Infinity""".stripMargin.replaceAll(System.lineSeparator(), "")) {
      model.splits.map(a => a.mkString(", ")).mkString(";")
    }
  }

  /*
  test("Run MDLPD on all columns in serverX data (label = target2, maxBins = 50, maxByPart = 100000)") {
    val hugeDf = readServerBigXData(sqlContext)
    val model = getDiscretizerModel(hugeDf,
      Array("CPU1_TJ", "CPU2_TJ", "total_cfm", "rpm1"),
      "target2", maxBins = 50, maxByPart = 100000, stoppingCriterion = 0, minBinPercentage = 1)

    assertResult(
      """-Infinity, 318.92932, 320.66278, 322.14136, 323.5317, 324.55957, 325.62488, 326.33478, 326.93597, 327.677, 328.41107, 329.0656, 329.552, 330.19537, 331.17865, 331.67218, 332.47205, 333.45264, 334.76575, 335.46588, 336.4815, 337.69043, 338.60754, 339.64154, 340.61115, 341.57526, 342.61255, 343.62604, 344.6363, 345.54968, 347.27777, 348.81586, 349.84296, 350.7796, 351.79175, 352.8418, 354.43475, 355.75763, 356.96387, 358.05756, 359.97095, 361.74945, 365.34253, Infinity;
        |-Infinity, 0.0048293103, 0.006533241, 0.007322928, 0.008420553, 0.009544572, 0.010134855, 0.011315489, 0.012443554, 0.012881836, 0.013231316, 0.013533895, 0.013770746, 0.014101778, 0.014954589, 0.01537479, 0.015527334, 0.016314605, 0.01658915, 0.016779263, 0.017007329, 0.017220858, 0.017391697, 0.01765886, 0.017863624, 0.018036477, 0.019336067, 0.01947882, 0.020166129, 0.020501602, 0.020615572, 0.02077407, 0.021069009, 0.022354089, 0.022517765, 0.022767588, 0.024113845, 0.024294734, 0.024651807, 0.02496219, 0.026505966, 0.026643261, 0.027104303, 0.027291618, 0.027690107, 0.027975807, 0.029095918, 0.02965632, 0.030376278, 0.03154885, Infinity;
        |-Infinity, 10.232729, 13.843154, 15.516405, 17.842142, 20.2238, 21.47454, 23.976166, 26.366398, 27.295065, 28.035572, 28.6767, 29.178558, 29.879974, 31.686981, 32.577335, 32.90056, 34.56869, 35.150467, 35.553246, 36.03649, 36.488934, 36.850918, 37.417, 37.850876, 38.217133, 40.970806, 41.273285, 42.729607, 43.440437, 43.681923, 44.017765, 44.642704, 47.36563, 47.71244, 48.241787, 51.094345, 51.477623, 52.234222, 52.891884, 56.162964, 56.453873, 57.430767, 57.827667, 58.672012, 59.277378, 61.650757, 62.83818, 64.363686, 66.84822, Infinity;
        |-Infinity, 48.084595, 50.028465, 51.11915, 52.04415, 52.863308, 53.49344, 54.4625, 55.088768, 55.861282, 56.494324, 57.037243, 57.599815, 58.21199, 58.74801, 59.3397, 59.68271, 60.296997, 60.751076, 61.35033, 62.03738, 62.631493, 63.027573, 63.640747, 64.366776, 64.76927, 65.375275, 65.774445, 66.316696, 66.92134, 67.515854, 68.26399, 68.85353, 69.874985, 70.5974, 71.41124, 71.99332, 72.80592, 73.74686, 74.48639, 75.28889, 75.94084, 76.620636, 78.69476, 80.69101, 82.90765, 84.98329, 87.53667, 90.333786, 94.00575, Infinity
        |""".stripMargin.replaceAll(System.lineSeparator(), "")) {
      model.splits.map(a => a.mkString(", ")).mkString(";")
    }
  }

  test("Run MDLPD on all columns in serverX data (label = target2, maxBins = 50, maxByPart = 10000)") {
    val hugeDf = readServerBigXData(sqlContext)
    val model = getDiscretizerModel(hugeDf,
      Array("CPU1_TJ", "CPU2_TJ", "total_cfm", "rpm1"),
      "target2", maxBins = 50, maxByPart = 10000, stoppingCriterion = 0, minBinPercentage = 1)

    assertResult(
      """-Infinity, 318.92932, 320.66278, 322.14136, 323.5317, 324.55957, 325.62488, 326.33478, 326.93597, 327.677, 328.41107, 329.0656, 329.552, 330.19537, 331.17865, 331.67218, 332.47205, 333.45264, 334.76575, 335.46588, 336.4815, 337.69043, 338.60754, 339.64154, 340.61115, 341.57526, 342.61255, 343.62604, 344.6363, 345.54968, 347.27777, 348.81586, 349.84296, 350.7796, 351.79175, 352.8418, 354.43475, 355.75763, 356.96387, 358.05756, 359.97095, 361.74945, 365.34253, Infinity;
        |-Infinity, 0.0048293103, 0.006533241, 0.007322928, 0.008420553, 0.009544572, 0.010134855, 0.011315489, 0.012443554, 0.012881836, 0.013231316, 0.013533895, 0.013770746, 0.014101778, 0.014954589, 0.01537479, 0.015527334, 0.016314605, 0.01658915, 0.016779263, 0.017007329, 0.017220858, 0.017391697, 0.01765886, 0.017863624, 0.018036477, 0.019336067, 0.01947882, 0.020166129, 0.020501602, 0.020615572, 0.02077407, 0.021069009, 0.022354089, 0.022517765, 0.022767588, 0.024113845, 0.024294734, 0.024651807, 0.02496219, 0.026505966, 0.026643261, 0.027104303, 0.027291618, 0.027690107, 0.027975807, 0.029095918, 0.02965632, 0.030376278, 0.03154885, Infinity;
        |-Infinity, 10.232729, 13.843154, 15.516405, 17.842142, 20.2238, 21.47454, 23.976166, 26.366398, 27.295065, 28.035572, 28.6767, 29.178558, 29.879974, 31.686981, 32.577335, 32.90056, 34.56869, 35.150467, 35.553246, 36.03649, 36.488934, 36.850918, 37.417, 37.850876, 38.217133, 40.970806, 41.273285, 42.729607, 43.440437, 43.681923, 44.017765, 44.642704, 47.36563, 47.71244, 48.241787, 51.094345, 51.477623, 52.234222, 52.891884, 56.162964, 56.453873, 57.430767, 57.827667, 58.672012, 59.277378, 61.650757, 62.83818, 64.363686, 66.84822, Infinity;
        |-Infinity, 48.084595, 50.028465, 51.11915, 52.04415, 52.863308, 53.49344, 54.4625, 55.088768, 55.861282, 56.494324, 57.037243, 57.599815, 58.21199, 58.74801, 59.3397, 59.68271, 60.296997, 60.751076, 61.35033, 62.03738, 62.631493, 63.027573, 63.640747, 64.366776, 64.76927, 65.375275, 65.774445, 66.316696, 66.92134, 67.515854, 68.26399, 68.85353, 69.874985, 70.5974, 71.41124, 71.99332, 72.80592, 73.74686, 74.48639, 75.28889, 75.94084, 76.620636, 78.69476, 80.69101, 82.90765, 84.98329, 87.53667, 90.333786, 94.00575, Infinity
        |""".stripMargin.replaceAll(System.lineSeparator(), "")) {
      model.splits.map(a => a.mkString(", ")).mkString(";")
    }
  }*/

  /**
    *test("Run MDLPD on all columns in serverX data (label = churned, maxBins = 10, maxByPart = 1000000)") {
    **
    *val df = readServerXData(sqlContext)
    *val model = getDiscretizerModel(df,
    *Array("Unique Key", "Closed Date",
    *"X Coordinate (State Plane)", "Y Coordinate (State Plane)", "Latitude", "Longitude"),
    *"Borough", maxBins = 10, maxByPart = 1000000, stoppingCriterion = 0, minBinPercentage = 1.0)
    **
 *assertResult(
    *"""-Infinity, Infinity;
    *|-Infinity, 1.45611057E12, 1.45654704E12, 1.45699635E12, 1.4570265E12, 1.45708286E12, 1.45716701E12, 1.45742234E12, 1.45743885E12, 1.45745825E12, Infinity;
    *|-Infinity, 970456.5, 979403.5, 1000563.5, 1002918.5, 1004505.5, 1007262.5, 1008990.0, 1026862.5, 1035048.5, Infinity;
    *|-Infinity, 147927.5, 161622.0, 175366.5, 186795.0, 190705.5, 196383.5, 207899.5, 231557.0, 255966.0, Infinity;
    *|-Infinity, 40.572594, 40.60902, 40.647987, 40.679405, 40.690117, 40.70574, 40.73729, 40.802223, 40.869225, Infinity;
    *|-Infinity, -74.04968, -74.01747, -73.94113, -73.93254, -73.92691, -73.916916, -73.90918, -73.846176, -73.81647, Infinity
    *|""".stripMargin.replaceAll(System.lineSeparator(), "")) {
    *model.splits.map(a => a.mkString(", ")).mkString(";")
    * }
    *}*/

}